{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"6.Lite. Полносвязные сети, обучающая и тестовая выборки\"","provenance":[{"file_id":"1vi7QH5J3AWmT3yVRvhxn_RNKHCQtN2Xc","timestamp":1630492578911},{"file_id":"1me0-NBdrgvjv6sCU5Cu4CS0wR5wJV9FY","timestamp":1630464725281},{"file_id":"1UGuydqnktDzqWuRLa8gx4wU1zA_HST8s","timestamp":1630031729985},{"file_id":"13rEZDhS3bRZq0ss9LEPLJ0rH1C5TedkF","timestamp":1598452121440},{"file_id":"1yxk2TuN5dVSl3ZQXmCYb7ATjD2fkNYac","timestamp":1598451602941},{"file_id":"1c266flcZM1ekdGTVJAWE62u_tSixPfZ-","timestamp":1597651300901}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Z4M2Jz0wo6sT"},"source":["Задание Lite\n","\n","Макс 10 баллов\n","\n","Создайте модель для распознавания рукописных цифр из набора MNIST (можно воспользоваться ноутбуком 1-го занятия) и проведите ряд тестов:\n","\n","Запустите сеть с различными размерами обучающей и проверочной выборок:\n","\n","Обучающая выборка 50.000 примеров\n","\n","Обучающая выборка 10.000 примеров\n","\n","Обучающая выборка 500 примеров\n","\n","2.  Поменяйте архитектуру нейронной сети любым образом и сравните значения точности на проверочной выборке (на          последней эпохе) и на тестовой выборке. Сделайте сравнительную таблицу.\n","\n","3. Создайте сеть, содержащую следующие слои (слои могут находится в любом порядке):\n","\n","4 Dense слоя\n","\n","3 Dropout слоя\n","\n","3 BatchNormalization слоя\n","\n","Напишите свои выводы по результатам проведенных тестов.\n"]},{"cell_type":"code","metadata":{"id":"OAMphP-JpAxs"},"source":["# 1.Импорт библиотек\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras import utils\n","from tensorflow.keras.preprocessing import image\n","import numpy as np\n","import pylab\n","from mpl_toolkits.mplot3d import Axes3D\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jpfvZWJqgXQq"},"source":["# 2. Загрузка базы mnist\n","(x_train_org, y_train_org), (x_test_org, y_test_org) = mnist.load_data()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wq2nCNw5gnWi"},"source":["# 3. Нормирование и преобразование x_train и y_train.\n","x_train = x_train_org.reshape(60000, 784)\n","x_test = x_test_org.reshape(10000, 784)\n","x_train = x_train.astype('float32')\n","x_train = x_train/255\n","x_test = x_test.astype('float32')\n","x_test = x_test/255\n","y_train = utils.to_categorical(y_train_org,10)\n","y_test = utils.to_categorical(y_test_org,10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mh9SmfH_leXp"},"source":["# 4. Функция пересоздаёт пустую сеть\n","def createModel():\n","\n","  # Создаем сеть\n","  model = Sequential()\n","\n","  # Добавляем слои\n","  model.add(Dense(800, input_dim = 784, activation = 'relu'))\n","  model.add(Dense(400, activation = 'relu'))\n","  model.add(Dense(10, activation = 'softmax'))\n","\n","  # Компилируем сеть\n","  model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = 'accuracy')\n","\n","  return model # Возвращаем созданную сеть"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"07jnuuLgm7u-","executionInfo":{"status":"ok","timestamp":1630551031866,"user_tz":-420,"elapsed":41906,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"aa32fbbd-8e1d-44f0-e2e8-3b76345b8449"},"source":["# 5.1. Обучение нейронной сети. Обучающая выборка 50.000 примеров\n","\n","n_val = 10000               # Указываем 10000 примеров в проверочную выборку\n","x_len = x_train.shape[0]    # Запоминаем размер всей выборки целиком\n","model = createModel()       # Создаём пустую сеть\n","\n","# Обучаем сеть\n","model.fit(x_train[:x_len-n_val], # Берём все до индекса 60000 - 10000 = 50000\n","          y_train[:x_len-n_val], \n","          batch_size=128, \n","          epochs=15,          \n","          validation_data=(x_train[x_len-n_val:], y_train[x_len-n_val:]), \n","          verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","391/391 [==============================] - 3s 5ms/step - loss: 0.2225 - accuracy: 0.9344 - val_loss: 0.1186 - val_accuracy: 0.9648\n","Epoch 2/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0817 - accuracy: 0.9745 - val_loss: 0.0887 - val_accuracy: 0.9732\n","Epoch 3/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0505 - accuracy: 0.9845 - val_loss: 0.0728 - val_accuracy: 0.9782\n","Epoch 4/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0362 - accuracy: 0.9882 - val_loss: 0.0886 - val_accuracy: 0.9744\n","Epoch 5/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0255 - accuracy: 0.9919 - val_loss: 0.0763 - val_accuracy: 0.9785\n","Epoch 6/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0210 - accuracy: 0.9930 - val_loss: 0.0865 - val_accuracy: 0.9775\n","Epoch 7/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0185 - accuracy: 0.9938 - val_loss: 0.0906 - val_accuracy: 0.9773\n","Epoch 8/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0146 - accuracy: 0.9950 - val_loss: 0.0925 - val_accuracy: 0.9773\n","Epoch 9/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0132 - accuracy: 0.9956 - val_loss: 0.0999 - val_accuracy: 0.9773\n","Epoch 10/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0148 - accuracy: 0.9953 - val_loss: 0.0873 - val_accuracy: 0.9805\n","Epoch 11/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0143 - accuracy: 0.9951 - val_loss: 0.0943 - val_accuracy: 0.9790\n","Epoch 12/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0078 - accuracy: 0.9974 - val_loss: 0.0913 - val_accuracy: 0.9814\n","Epoch 13/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0110 - accuracy: 0.9963 - val_loss: 0.1192 - val_accuracy: 0.9784\n","Epoch 14/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0091 - accuracy: 0.9969 - val_loss: 0.1043 - val_accuracy: 0.9799\n","Epoch 15/15\n","391/391 [==============================] - 2s 5ms/step - loss: 0.0140 - accuracy: 0.9955 - val_loss: 0.1222 - val_accuracy: 0.9772\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0f0b103710>"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxRghbXfa85d","executionInfo":{"status":"ok","timestamp":1630551228049,"user_tz":-420,"elapsed":1882,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"6b3ae748-3927-498c-ceaf-0684cdacff3a"},"source":["# Вычисляем результаты сети на тестовом наборе\n","scores = model.evaluate(x_test, y_test, verbose=1)\n","# scores состоит из двух значений\n","# scores[0] - loss сети на тестовой выборке\n","# scores[1] - процент правильно распознанных примеров на тестовой выборке\n","print(scores)\n","print(\"Доля верных ответов на тестовых данных, в процентах: \", round(scores[1] * 100, 4), \"%\", sep=\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.1144 - accuracy: 0.9803\n","[0.11437506973743439, 0.9803000092506409]\n","Доля верных ответов на тестовых данных, в процентах: 98.03%\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A25bpggk2Y7G","executionInfo":{"status":"ok","timestamp":1630551322633,"user_tz":-420,"elapsed":41806,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"262d4771-c0f1-49a6-b7f7-4a303ce0bf9c"},"source":["# 5.2. Обучение нейронной сети. Обучающая выборка 10.000 примеров\n","\n","n_val = 50000               # Указываем 50000 примеров в проверочную выборку\n","x_len = x_train.shape[0]    # Запоминаем размер всей выборки целиком\n","model = createModel()       # Создаём пустую сеть\n","\n","# Обучаем сеть\n","model.fit(x_train[:x_len-n_val], # Берём все до индекса 60000 - 10000 = 50000\n","          y_train[:x_len-n_val], \n","          batch_size=128, \n","          epochs=15,          \n","          validation_data=(x_train[x_len-n_val:], y_train[x_len-n_val:]), \n","          verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","79/79 [==============================] - 2s 23ms/step - loss: 0.4772 - accuracy: 0.8624 - val_loss: 0.2600 - val_accuracy: 0.9246\n","Epoch 2/15\n","79/79 [==============================] - 1s 16ms/step - loss: 0.1683 - accuracy: 0.9518 - val_loss: 0.2111 - val_accuracy: 0.9364\n","Epoch 3/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.1068 - accuracy: 0.9677 - val_loss: 0.1957 - val_accuracy: 0.9386\n","Epoch 4/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0602 - accuracy: 0.9827 - val_loss: 0.1627 - val_accuracy: 0.9522\n","Epoch 5/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0438 - accuracy: 0.9881 - val_loss: 0.1637 - val_accuracy: 0.9521\n","Epoch 6/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0279 - accuracy: 0.9917 - val_loss: 0.1519 - val_accuracy: 0.9579\n","Epoch 7/15\n","79/79 [==============================] - 2s 21ms/step - loss: 0.0201 - accuracy: 0.9949 - val_loss: 0.1642 - val_accuracy: 0.9569\n","Epoch 8/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0093 - accuracy: 0.9984 - val_loss: 0.1511 - val_accuracy: 0.9609\n","Epoch 9/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0028 - accuracy: 1.0000 - val_loss: 0.1562 - val_accuracy: 0.9609\n","Epoch 10/15\n","79/79 [==============================] - 1s 17ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.1586 - val_accuracy: 0.9617\n","Epoch 11/15\n","79/79 [==============================] - 2s 21ms/step - loss: 9.9345e-04 - accuracy: 1.0000 - val_loss: 0.1608 - val_accuracy: 0.9621\n","Epoch 12/15\n","79/79 [==============================] - 2s 21ms/step - loss: 7.7111e-04 - accuracy: 1.0000 - val_loss: 0.1631 - val_accuracy: 0.9623\n","Epoch 13/15\n","79/79 [==============================] - 2s 20ms/step - loss: 6.4686e-04 - accuracy: 1.0000 - val_loss: 0.1656 - val_accuracy: 0.9624\n","Epoch 14/15\n","79/79 [==============================] - 2s 21ms/step - loss: 5.6083e-04 - accuracy: 1.0000 - val_loss: 0.1675 - val_accuracy: 0.9624\n","Epoch 15/15\n","79/79 [==============================] - 2s 20ms/step - loss: 4.8543e-04 - accuracy: 1.0000 - val_loss: 0.1692 - val_accuracy: 0.9626\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0f0af73650>"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rjv2IHBYb0Vr","executionInfo":{"status":"ok","timestamp":1630551374612,"user_tz":-420,"elapsed":1746,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"0e4303ec-866a-44b6-ac68-2a0fd554d2c4"},"source":["# Вычисляем результаты сети на тестовом наборе\n","scores = model.evaluate(x_test, y_test, verbose=1)\n","print(scores)\n","print(\"Доля верных ответов на тестовых данных, в процентах: \", round(scores[1] * 100, 4), \"%\", sep=\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.1507 - accuracy: 0.9650\n","[0.1507117599248886, 0.9649999737739563]\n","Доля верных ответов на тестовых данных, в процентах: 96.5%\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJ8iD9WR2lbL","executionInfo":{"status":"ok","timestamp":1630551408569,"user_tz":-420,"elapsed":19854,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"8bc32ae8-8031-426f-f429-7fa3ae77747d"},"source":["# 5.3. Обучение нейронной сети. Обучающая выборка 500 примеров\n","\n","n_val = 59500               # Указываем 50000 примеров в проверочную выборку\n","x_len = x_train.shape[0]    # Запоминаем размер всей выборки целиком\n","model = createModel()       # Создаём пустую сеть\n","\n","# Обучаем сеть\n","model.fit(x_train[:x_len-n_val], # Берём все до индекса 60000 - 10000 = 50000\n","          y_train[:x_len-n_val], \n","          batch_size=128, \n","          epochs=15,          \n","          validation_data=(x_train[x_len-n_val:], y_train[x_len-n_val:]), \n","          verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","4/4 [==============================] - 2s 505ms/step - loss: 1.8804 - accuracy: 0.4940 - val_loss: 1.3204 - val_accuracy: 0.7096\n","Epoch 2/15\n","4/4 [==============================] - 1s 431ms/step - loss: 0.8437 - accuracy: 0.8300 - val_loss: 0.7742 - val_accuracy: 0.7658\n","Epoch 3/15\n","4/4 [==============================] - 1s 396ms/step - loss: 0.4066 - accuracy: 0.8880 - val_loss: 0.6418 - val_accuracy: 0.7948\n","Epoch 4/15\n","4/4 [==============================] - 1s 431ms/step - loss: 0.2614 - accuracy: 0.9280 - val_loss: 0.5884 - val_accuracy: 0.8133\n","Epoch 5/15\n","4/4 [==============================] - 1s 432ms/step - loss: 0.1589 - accuracy: 0.9600 - val_loss: 0.5628 - val_accuracy: 0.8310\n","Epoch 6/15\n","4/4 [==============================] - 1s 393ms/step - loss: 0.0973 - accuracy: 0.9760 - val_loss: 0.5522 - val_accuracy: 0.8354\n","Epoch 7/15\n","4/4 [==============================] - 1s 394ms/step - loss: 0.0567 - accuracy: 0.9920 - val_loss: 0.5782 - val_accuracy: 0.8363\n","Epoch 8/15\n","4/4 [==============================] - 1s 431ms/step - loss: 0.0288 - accuracy: 1.0000 - val_loss: 0.5632 - val_accuracy: 0.8437\n","Epoch 9/15\n","4/4 [==============================] - 1s 388ms/step - loss: 0.0190 - accuracy: 1.0000 - val_loss: 0.5633 - val_accuracy: 0.8488\n","Epoch 10/15\n","4/4 [==============================] - 1s 399ms/step - loss: 0.0121 - accuracy: 1.0000 - val_loss: 0.5851 - val_accuracy: 0.8461\n","Epoch 11/15\n","4/4 [==============================] - 1s 432ms/step - loss: 0.0084 - accuracy: 1.0000 - val_loss: 0.6040 - val_accuracy: 0.8433\n","Epoch 12/15\n","4/4 [==============================] - 1s 397ms/step - loss: 0.0064 - accuracy: 1.0000 - val_loss: 0.6161 - val_accuracy: 0.8440\n","Epoch 13/15\n","4/4 [==============================] - 1s 431ms/step - loss: 0.0048 - accuracy: 1.0000 - val_loss: 0.6106 - val_accuracy: 0.8492\n","Epoch 14/15\n","4/4 [==============================] - 1s 391ms/step - loss: 0.0036 - accuracy: 1.0000 - val_loss: 0.6087 - val_accuracy: 0.8520\n","Epoch 15/15\n","4/4 [==============================] - 1s 432ms/step - loss: 0.0030 - accuracy: 1.0000 - val_loss: 0.6094 - val_accuracy: 0.8524\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0f02db5910>"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WCvXVH5hcC2r","executionInfo":{"status":"ok","timestamp":1630551442630,"user_tz":-420,"elapsed":1533,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"55d3a21f-9d37-4770-b561-d4c3deb694b8"},"source":["# Вычисляем результаты сети на тестовом наборе\n","scores = model.evaluate(x_test, y_test, verbose=1)\n","print(scores)\n","print(\"Доля верных ответов на тестовых данных, в процентах: \", round(scores[1] * 100, 4), \"%\", sep=\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.5709 - accuracy: 0.8593\n","[0.5708686113357544, 0.8593000173568726]\n","Доля верных ответов на тестовых данных, в процентах: 85.93%\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HnAsoZOwLXQ2","executionInfo":{"status":"ok","timestamp":1630551531061,"user_tz":-420,"elapsed":49181,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"55b528b3-123b-4ced-8f56-2216485ecad6"},"source":["# 6.Поменяли архитектуру нейронной сети любым образом \n","model_1 = Sequential()\n","\n","model_1.add(Dense(300,input_dim = 784, activation = 'relu'))\n","model_1.add(Dense(100,activation = 'relu'))\n","model_1.add(Dense(10, activation = 'softmax'))\n","\n","model_1.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = 'accuracy')\n","\n","model_1.fit(x_train, \n","          y_train, \n","          batch_size = 100, \n","          validation_split=0.3,   # Указываем 30% примеров для проверочной выборки\n","          epochs = 30, \n","          verbose = 1)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.2993 - accuracy: 0.9140 - val_loss: 0.1555 - val_accuracy: 0.9532\n","Epoch 2/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.1120 - accuracy: 0.9667 - val_loss: 0.1172 - val_accuracy: 0.9634\n","Epoch 3/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0717 - accuracy: 0.9787 - val_loss: 0.1068 - val_accuracy: 0.9689\n","Epoch 4/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0504 - accuracy: 0.9850 - val_loss: 0.0971 - val_accuracy: 0.9715\n","Epoch 5/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0376 - accuracy: 0.9884 - val_loss: 0.1027 - val_accuracy: 0.9718\n","Epoch 6/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0286 - accuracy: 0.9908 - val_loss: 0.1014 - val_accuracy: 0.9736\n","Epoch 7/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0196 - accuracy: 0.9941 - val_loss: 0.0932 - val_accuracy: 0.9755\n","Epoch 8/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0148 - accuracy: 0.9954 - val_loss: 0.1020 - val_accuracy: 0.9728\n","Epoch 9/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0154 - accuracy: 0.9949 - val_loss: 0.1187 - val_accuracy: 0.9713\n","Epoch 10/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0139 - accuracy: 0.9956 - val_loss: 0.1080 - val_accuracy: 0.9753\n","Epoch 11/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0157 - accuracy: 0.9950 - val_loss: 0.1135 - val_accuracy: 0.9737\n","Epoch 12/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0089 - accuracy: 0.9974 - val_loss: 0.1155 - val_accuracy: 0.9739\n","Epoch 13/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0091 - accuracy: 0.9971 - val_loss: 0.1194 - val_accuracy: 0.9751\n","Epoch 14/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0125 - accuracy: 0.9959 - val_loss: 0.1362 - val_accuracy: 0.9713\n","Epoch 15/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0063 - accuracy: 0.9982 - val_loss: 0.1299 - val_accuracy: 0.9732\n","Epoch 16/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0094 - accuracy: 0.9967 - val_loss: 0.1365 - val_accuracy: 0.9728\n","Epoch 17/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0089 - accuracy: 0.9971 - val_loss: 0.1505 - val_accuracy: 0.9728\n","Epoch 18/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.0096 - accuracy: 0.9966 - val_loss: 0.1313 - val_accuracy: 0.9745\n","Epoch 19/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0060 - accuracy: 0.9980 - val_loss: 0.1273 - val_accuracy: 0.9769\n","Epoch 20/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0037 - accuracy: 0.9988 - val_loss: 0.1375 - val_accuracy: 0.9767\n","Epoch 21/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0041 - accuracy: 0.9986 - val_loss: 0.1640 - val_accuracy: 0.9722\n","Epoch 22/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0126 - accuracy: 0.9959 - val_loss: 0.1600 - val_accuracy: 0.9703\n","Epoch 23/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0092 - accuracy: 0.9968 - val_loss: 0.1455 - val_accuracy: 0.9755\n","Epoch 24/30\n","420/420 [==============================] - 2s 4ms/step - loss: 0.0023 - accuracy: 0.9993 - val_loss: 0.1379 - val_accuracy: 0.9778\n","Epoch 25/30\n","420/420 [==============================] - 2s 4ms/step - loss: 6.1657e-04 - accuracy: 0.9998 - val_loss: 0.1326 - val_accuracy: 0.9791\n","Epoch 26/30\n","420/420 [==============================] - 2s 4ms/step - loss: 2.9573e-04 - accuracy: 0.9999 - val_loss: 0.1277 - val_accuracy: 0.9804\n","Epoch 27/30\n","420/420 [==============================] - 2s 4ms/step - loss: 5.5518e-05 - accuracy: 1.0000 - val_loss: 0.1280 - val_accuracy: 0.9803\n","Epoch 28/30\n","420/420 [==============================] - 2s 4ms/step - loss: 3.6455e-05 - accuracy: 1.0000 - val_loss: 0.1297 - val_accuracy: 0.9806\n","Epoch 29/30\n","420/420 [==============================] - 2s 4ms/step - loss: 2.8668e-05 - accuracy: 1.0000 - val_loss: 0.1309 - val_accuracy: 0.9808\n","Epoch 30/30\n","420/420 [==============================] - 2s 4ms/step - loss: 2.3332e-05 - accuracy: 1.0000 - val_loss: 0.1324 - val_accuracy: 0.9810\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0f023d1c50>"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fiwh5PHJQIgX","executionInfo":{"status":"ok","timestamp":1630551584130,"user_tz":-420,"elapsed":1739,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"56a21921-1522-4c48-980f-5612dd93caa1"},"source":["# Вычисляем результаты сети на тестовом наборе\n","scores = model_1.evaluate(x_test, y_test, verbose=1)\n","print(scores)\n","print(\"Доля верных ответов на тестовых данных, в процентах: \", round(scores[1] * 100, 4), \"%\", sep=\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.0989 - accuracy: 0.9826\n","[0.09890148043632507, 0.9825999736785889]\n","Доля верных ответов на тестовых данных, в процентах: 98.26%\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gArys1e0WM2e","executionInfo":{"status":"ok","timestamp":1630551811181,"user_tz":-420,"elapsed":73424,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"a30e6c62-d56d-46dd-d05e-795a3930db0f"},"source":["# 7.Создали сеть, содержащую следующие слои (слои могут находится в любом порядке): 4 Dense слоя, 3 Dropout слоя, 3 BatchNormalization слоя\n","\n","model_2 = Sequential()\n","model_2.add(BatchNormalization(input_dim=784))\n","model_2.add(Dense(32, activation='relu'))\n","model_2.add(Dropout(0.3))\n","model_2.add(Dense(128, activation='relu'))\n","model_2.add(BatchNormalization())\n","model_2.add(Dropout(0.2))\n","model_2.add(Dense(64, activation='relu'))\n","model_2.add(BatchNormalization())\n","model_2.add(Dropout(0.1))\n","model_2.add(Dense(10, activation='softmax'))\n","\n","model_2.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = 'accuracy')\n","\n","model_2.fit(x_train, \n","          y_train, \n","          batch_size = 100, \n","          validation_split=0.3,   # Указываем 30% примеров для проверочной выборки\n","          epochs = 30, \n","          verbose = 1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","420/420 [==============================] - 4s 7ms/step - loss: 0.7633 - accuracy: 0.7578 - val_loss: 0.2585 - val_accuracy: 0.9238\n","Epoch 2/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.4203 - accuracy: 0.8728 - val_loss: 0.2178 - val_accuracy: 0.9338\n","Epoch 3/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.3569 - accuracy: 0.8899 - val_loss: 0.1907 - val_accuracy: 0.9424\n","Epoch 4/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.3259 - accuracy: 0.9013 - val_loss: 0.1750 - val_accuracy: 0.9483\n","Epoch 5/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2995 - accuracy: 0.9092 - val_loss: 0.1735 - val_accuracy: 0.9484\n","Epoch 6/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2907 - accuracy: 0.9110 - val_loss: 0.1665 - val_accuracy: 0.9501\n","Epoch 7/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2753 - accuracy: 0.9165 - val_loss: 0.1657 - val_accuracy: 0.9515\n","Epoch 8/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2613 - accuracy: 0.9203 - val_loss: 0.1649 - val_accuracy: 0.9504\n","Epoch 9/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2557 - accuracy: 0.9221 - val_loss: 0.1627 - val_accuracy: 0.9523\n","Epoch 10/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2463 - accuracy: 0.9248 - val_loss: 0.1592 - val_accuracy: 0.9528\n","Epoch 11/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2458 - accuracy: 0.9256 - val_loss: 0.1598 - val_accuracy: 0.9525\n","Epoch 12/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2434 - accuracy: 0.9250 - val_loss: 0.1567 - val_accuracy: 0.9548\n","Epoch 13/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2345 - accuracy: 0.9280 - val_loss: 0.1586 - val_accuracy: 0.9544\n","Epoch 14/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2271 - accuracy: 0.9306 - val_loss: 0.1541 - val_accuracy: 0.9555\n","Epoch 15/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2248 - accuracy: 0.9314 - val_loss: 0.1502 - val_accuracy: 0.9552\n","Epoch 16/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2241 - accuracy: 0.9307 - val_loss: 0.1489 - val_accuracy: 0.9571\n","Epoch 17/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2189 - accuracy: 0.9310 - val_loss: 0.1589 - val_accuracy: 0.9534\n","Epoch 18/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2166 - accuracy: 0.9339 - val_loss: 0.1524 - val_accuracy: 0.9547\n","Epoch 19/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.2104 - accuracy: 0.9353 - val_loss: 0.1490 - val_accuracy: 0.9568\n","Epoch 20/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2058 - accuracy: 0.9368 - val_loss: 0.1479 - val_accuracy: 0.9561\n","Epoch 21/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2065 - accuracy: 0.9351 - val_loss: 0.1512 - val_accuracy: 0.9554\n","Epoch 22/30\n","420/420 [==============================] - 2s 6ms/step - loss: 0.2040 - accuracy: 0.9364 - val_loss: 0.1508 - val_accuracy: 0.9558\n","Epoch 23/30\n","420/420 [==============================] - 2s 6ms/step - loss: 0.2006 - accuracy: 0.9381 - val_loss: 0.1483 - val_accuracy: 0.9566\n","Epoch 24/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.2016 - accuracy: 0.9381 - val_loss: 0.1483 - val_accuracy: 0.9568\n","Epoch 25/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.1984 - accuracy: 0.9388 - val_loss: 0.1458 - val_accuracy: 0.9575\n","Epoch 26/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.1941 - accuracy: 0.9404 - val_loss: 0.1454 - val_accuracy: 0.9574\n","Epoch 27/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.1945 - accuracy: 0.9403 - val_loss: 0.1439 - val_accuracy: 0.9591\n","Epoch 28/30\n","420/420 [==============================] - 3s 6ms/step - loss: 0.1921 - accuracy: 0.9400 - val_loss: 0.1506 - val_accuracy: 0.9564\n","Epoch 29/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.1908 - accuracy: 0.9404 - val_loss: 0.1434 - val_accuracy: 0.9586\n","Epoch 30/30\n","420/420 [==============================] - 2s 5ms/step - loss: 0.1907 - accuracy: 0.9404 - val_loss: 0.1443 - val_accuracy: 0.9585\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0f02b08c50>"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wlMX9svQaLCm","executionInfo":{"status":"ok","timestamp":1630551843265,"user_tz":-420,"elapsed":2019,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"8d99749a-8710-4767-9f18-a299be0de524"},"source":["# Вычисляем результаты сети на тестовом наборе\n","scores = model_2.evaluate(x_test, y_test, verbose=1)\n","print(scores)\n","print(\"Доля верных ответов на тестовых данных, в процентах: \", round(scores[1] * 100, 4), \"%\", sep=\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 4ms/step - loss: 0.1365 - accuracy: 0.9604\n","[0.1364879459142685, 0.9603999853134155]\n","Доля верных ответов на тестовых данных, в процентах: 96.04%\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":205},"id":"Nx4WfpQGgKB-","executionInfo":{"status":"ok","timestamp":1630553401446,"user_tz":-420,"elapsed":814,"user":{"displayName":"Irina Yankovskaya","photoUrl":"","userId":"15469596241685905495"}},"outputId":"ed66db53-6e94-4c31-b8fa-440fd41fdc1e"},"source":["# Сравнительная таблица результатов экспериментов\n","import pandas as pd\n","columns = ['Наименование эксперимента', 'Точность на обучающем наборе данных, %', 'Точность на проверочном наборе данных, %', 'Точность на тестовом наборе данных, %']\n","data = [['Обучение на 50 000 примеров (п.5.1 ДЗ)', 99.55, 97.72, 98.03],\n","        ['Обучение на 10 000 примеров (п.5.2 ДЗ)', 100, 96.26, 96.5], \n","        ['Обучение на 500 примеров (п.5.3 ДЗ)', 100, 85.24, 85.93],\n","       ['Поменяли архитектуру нейронки (п.6 ДЗ)', 100, 98.10, 98.26],\n","       ['Создали нейронку из слоев (п.7 ДЗ)', 94.04, 95.85, 96.04]]      \n","df = pd.DataFrame(data, columns = columns)\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Наименование эксперимента</th>\n","      <th>Точность на обучающем наборе данных, %</th>\n","      <th>Точность на проверочном наборе данных, %</th>\n","      <th>Точность на тестовом наборе данных, %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Обучение на 50 000 примеров (п.5.1 ДЗ)</td>\n","      <td>99.55</td>\n","      <td>97.72</td>\n","      <td>98.03</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Обучение на 10 000 примеров (п.5.2 ДЗ)</td>\n","      <td>100.00</td>\n","      <td>96.26</td>\n","      <td>96.50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Обучение на 500 примеров (п.5.3 ДЗ)</td>\n","      <td>100.00</td>\n","      <td>85.24</td>\n","      <td>85.93</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Поменяли архитектуру нейронки (п.6 ДЗ)</td>\n","      <td>100.00</td>\n","      <td>98.10</td>\n","      <td>98.26</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Создали нейронку из слоев (п.7 ДЗ)</td>\n","      <td>94.04</td>\n","      <td>95.85</td>\n","      <td>96.04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Наименование эксперимента  ...  Точность на тестовом наборе данных, %\n","0  Обучение на 50 000 примеров (п.5.1 ДЗ)  ...                                  98.03\n","1  Обучение на 10 000 примеров (п.5.2 ДЗ)  ...                                  96.50\n","2     Обучение на 500 примеров (п.5.3 ДЗ)  ...                                  85.93\n","3  Поменяли архитектуру нейронки (п.6 ДЗ)  ...                                  98.26\n","4      Создали нейронку из слоев (п.7 ДЗ)  ...                                  96.04\n","\n","[5 rows x 4 columns]"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"EfrgCg-_3fj_"},"source":["**Вывод**: \n","Наилучшим экспериментом можно считать изменение архитектуры сети, здесь получены максимальные значения точности на обучающем , проверочном и тестовом наборах данных. \n","Уменьшение обучающего набора данных в 5 раз, дало несущественный рост точности на обучении нейронки и несущественно снизило точность на проверочном и тестовом наборах данных. \n","Уменьшение обучающего набора данных в 100 раз, дало также несущественный рост точности на обучении нейронки , однако на 11% снизился показатель точности,относительно показателей прошлого эксперимента, на проверочном и тестовом наборах данных. \n","Эксперимент со слоями Dropout и BatchNormalization не дал улучшения точности. Он сработал примерно с темже результатом, что и уменьшение обучающей базы в 5 раз.\n","Резюме: В поиске решения по достижению точности работы нейронки стоит сначала подумать об изменении архитектуры сети и провести ряд экспериментов. Далее по ситуации, я бы последовательно экспериментировала со слоями Dropout и BatchNormalization :)\n","\n"]}]}